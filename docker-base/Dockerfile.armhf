# Base Dockerfile for SDP images

# Ubuntu 14.04
FROM mazzolino/armhf-ubuntu@sha256:e54d0ee81a190bd5284e56716915d470e631ef117a4eed7fac214906b7172ad5

MAINTAINER Bruce Merry "bmerry@ska.ac.za"

# Suppress debconf warnings
ENV DEBIAN_FRONTEND noninteractive

# Install some system packages used by multiple images.
RUN apt-get -y update && apt-get -y install \
    apt-transport-https \
    build-essential pkg-config git-core software-properties-common wget \
    python python-dev libffi-dev libssl-dev python-pip python-virtualenv \
    libboost-python1.55-dev \
    libboost-system1.55-dev \
    libboost-regex1.55-dev \
    gfortran libatlas-dev libblas-dev liblapack-dev \
    libhdf5-dev libfreetype6-dev libpng-dev \
    llvm-3.6-dev libedit-dev \
    cmake flex bison libcfitsio3-dev libfftw3-dev wcslib-dev python-numpy

# Install casacore from source. The git version includes some fixes
# that aren't in the 2.0.3 release. Once 2.0.4 is released, that can
# be used instead.
RUN mkdir -p /tmp/builds && \
    cd /tmp/builds && \
    git clone https://github.com/casacore/casacore && \
    mkdir -p casacore/build && \
    cd casacore/build && \
    git checkout 9d9f4f0 && \
    cmake -DUSE_FFTW3=ON -DBUILD_TESTING=OFF -DUSE_OPENMP=ON -DUSE_HDF5=ON -DBUILD_PYTHON=ON .. && \
    make -j4 && \
    make install

# Install tini (a mini-init) and set it as entrypoint so that we don't
# accumulate zombie processes.
RUN cd /tmp && \
    git clone https://github.com/krallin/tini && \
    cd tini && \
    cmake . && \
    make && \
    cp tini /sbin/tini && \
    cd .. && rm -rf /tmp/tini
ENTRYPOINT ["/sbin/tini", "--"]

# Create and switch to a user which will be used to run commands with reduced
# privileges.
RUN adduser --disabled-password --gecos 'unprivileged user' kat
COPY id_rsa /home/kat/.ssh/
# Docker creates all COPY files as root
RUN chown -R kat:kat /home/kat/.ssh
USER kat

# Set up access to github private repositories
RUN echo "Host *\n\tStrictHostKeyChecking no\n" >> ~/.ssh/config
RUN chmod -R go-rwx ~/.ssh

COPY *-requirements.txt /home/kat/docker-base/
COPY install-requirements.py /home/kat/bin/
ENV LLVM_CONFIG="llvm-config-3.6"
# Pre-build a number of wheels to speed up building of dependent images. These
# are all the latest versions at the time of writing.
# Work around a numpy bug where it assumes x86-64.
RUN virtualenv ~/tmp-ve && \
    . ~/tmp-ve/bin/activate && \
    ~/bin/install-requirements.py -r ~/docker-base/pre-requirements.txt && \
    ~/bin/install-requirements.py -d ~/docker-base/base-requirements.txt numpy && \
    sed -i 's/-O2 -march=x86-64 -DMS_WIN64 -mtune=generic -msse2/-O2/' ~/tmp-ve/lib/python2.7/site-packages/numpy/distutils/fcompiler/gnu.py && \
    ~/bin/install-requirements.py -r ~/docker-base/base-requirements.txt && \
    rm -r ~/tmp-ve

# Create a virtual environment for use in child images
RUN virtualenv ~/ve && \
    . ~/ve/bin/activate && \
    pip install --no-deps -r ~/docker-base/pre-requirements.txt && \
    ~/bin/install-requirements.py -d ~/docker-base/base-requirements.txt manhole
# Activate it. We can't use ~/ve/bin/activate, because any environment set in a
# RUN step is lost at the end of the step. We also add ~/bin to PATH so that
# install-requirements.py can be found.
ENV PATH="/home/kat/ve/bin:/home/kat/bin:$PATH" \
    VIRTUAL_ENV="/home/kat/ve"
